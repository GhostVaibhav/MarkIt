name: C/C++ CI

on:
  push:
    branches: 
    - master
    - development
    paths:
    - '**.cpp'
    - '**.h'
    - '**.hpp'
    - '**.bat'
    - '**.txt'
    - '.github/workflows/**'
    - '!.vscode**'
    - '!**.md'
    - '!LICENSE'
    - '!CNAME'
  pull_request:
    branches:
    - master

jobs:
  Ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: Getting prerequisites
      run: |
        sudo apt update
        sudo apt upgrade
        sudo apt -y install g++ cmake
    - name: Building application
      run: |
        mkdir build
        cd build
        cmake .. -DCOMPILE=0
        cmake --build .
        cmake ..
        cmake --build .
  
  Debian:
    runs-on: ubuntu-latest
    container: debian
    steps:
      - uses: actions/checkout@v2
      - name: Getting prerequisites
        run: |
          apt update && apt -y install g++ git cmake
      - name: Building application
        run: | 
          git clone --recurse-submodules --remote-submodules https://github.com/GhostVaibhav/MarkIt.git && cd MarkIt && mkdir build && cd build && cmake .. -DCOMPILE=0 && cmake --build . && cmake .. && cmake --build .


  Arch-Linux:
    runs-on: ubuntu-latest
    container: archlinux
    steps:
      - name: Getting prerequisites
        run: |
          pacman -Syy --noconfirm
          pacman -Syu --noconfirm
          pacman -Sy gcc --noconfirm
          pacman -S git cmake make --noconfirm
      - uses: actions/checkout@v2
      - name: Checkout submodules
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Building application
        run: | 
          mkdir build && cd build && cmake .. -DCOMPILE=0 && cmake --build . && cmake .. && cmake --build .

  CentOS:
    runs-on: ubuntu-latest
    container: centos
    steps:
      - name: Getting prerequisites
        run: |
          yum -y update
          yum -y group install "Development Tools"
          yum -y install cmake
      - uses: actions/checkout@v2
      - name: Checkout submodules
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Building application
        run: | 
          mkdir build && cd build && cmake .. -DCOMPILE=0 && cmake --build . && cmake .. && cmake --build .

  Fedora-Linux:
    runs-on: ubuntu-latest
    container: fedora
    steps:
      - name: Getting prerequisites
        run: |
          dnf -y upgrade
          dnf -y install git gcc-c++ cmake
      - uses: actions/checkout@v2
      - name: Checkout submodules
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Building application
        run: | 
          mkdir build && cd build && cmake .. -DCOMPILE=0 && cmake --build . && cmake .. && cmake --build .

# OpenSUSE-Leap:
#   runs-on: ubuntu-latest
#   container: opensuse/leap
#   steps:
#     - name: Getting prerequisites
#       run: |
#         zypper refresh
#         zypper update -y
#         zypper install -y gcc-c++ cmake git
#     - uses: actions/checkout@v2
#     - name: Checkout submodules
#       run: |
#         auth_header="$(git config --local --get http.https://github.com/.extraheader)"
#         git submodule sync --recursive
#         git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
#     - name: Building application
#       run: | 
#         mkdir build && cd build && cmake .. -DCOMPILE=0 && cmake --build . && cmake .. && cmake --build .

#  OpenSUSE-Tumbleweed:
#    runs-on: ubuntu-latest
#    container: opensuse/tumbleweed
#    steps:
#      - name: Getting prerequisites
#        run: |
#          zypper refresh
#          zypper update -y
#          zypper install -y gcc-c++ libcurl-devel ncurses-devel cmake git
#      - uses: actions/checkout@v2
#      - name: Checkout submodules
#        run: |
#          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
#          git submodule sync --recursive
#          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
#      - name: Building application
#        run: | 
#          mkdir build && cd build && cmake .. && cmake --build .
  
  Kali-Linux:
    runs-on: ubuntu-latest
    container: kalilinux/kali-rolling
    steps:
      - name: Getting prerequisites
        run: |
          apt -y update
          apt -y upgrade
          apt -y install g++ cmake git
      - uses: actions/checkout@v2
      - name: Checkout submodules
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Building application
        run: | 
          mkdir build && cd build && cmake .. -DCOMPILE=0 && cmake --build . && cmake .. && cmake --build .

  Alpine:
    runs-on: ubuntu-latest
    container: alpine
    steps:
      - name: Getting prerequisites
        run: |
          apk update
          apk upgrade
          apk add g++ git cmake make
      - uses: actions/checkout@v2
      - name: Checkout submodules
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Building application
        run: | 
          mkdir build && cd build && cmake .. -DCOMPILE=0 && cmake --build . && cmake .. && cmake --build .
        
  Windows:
  
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, Release, MinSizeRel]
        architecture: [Win32, x64]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: |
        git clone --recurse-submodules --remote-submodules https://github.com/GhostVaibhav/MarkIt.git
    - name: Building the dependencies for MinGW G++ compiler
      run: |
        cd MarkIt
        mkdir builds && cd builds
        cmake .. -G "MinGW Makefiles" -DCOMPILE=0 -DINFOEX=0 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ls 
        cmake --build . --config ${{ matrix.build_type }}
    - name: Compiling the main project for MinGW G++ compiler
      run: |
        cd MarkIt
        cd builds
        cmake .. -G "MinGW Makefiles" -DCOMPILE=1 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build . --config ${{ matrix.build_type }}
        copy "MarkIt.exe" "bin\"
        cd bin
        ./MarkIt --version classic
    - name: Building the dependencies for MSVC compiler
      run: |
        cd MarkIt
        mkdir build && cd build
        cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.architecture }} -DCOMPILE=0 -DINFOEX=0 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build . --config ${{ matrix.build_type }}
    - name: Compiling the main project for MSVC compiler
      run: |
        cd MarkIt
        cd build
        cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.architecture }} -DCOMPILE=1 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build . --config ${{ matrix.build_type }}
        copy "MinSizeRel\MarkIt.exe" "bin\"
        cd bin
        ./MarkIt --version classic
  
  MacOS:
  
    runs-on: macos-latest
    strategy:
      matrix:
        xcode: [12.4, 12.3, 12.2, 12.1.1, 12.1, 12, 11.7, 11.6, 11.5, 11.4.1, 11.3.1, 11.2.1, 10.3]
        build_type: [Debug, Release, MinSizeRel]
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: Installing prerequisites
      run: |
        brew install gcc
        brew install make
        brew install cmake
        brew install curl
        brew tap nlohmann/json
        brew install nlohmann-json
    # - name: Building and compiling the build file using CMake in Apple Clang
    #   run: |
    #     mkdir build
    #     cd build
    #     cmake .. -DCOMPILE=0 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     cmake --build . --config ${{ matrix.build_type }}
    #     cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     cmake --build . --config ${{ matrix.build_type }}
    - name: Building and compiling using CMake as Xcode Project
      run: |
        mkdir builds
        cd builds
        cmake .. -G "Xcode" -DCOMPILE=0 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build . --config ${{ matrix.build_type }}
        cmake .. -G "Xcode" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build . --config =${{ matrix.build_type }}